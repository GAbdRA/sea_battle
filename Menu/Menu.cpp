#include "Menu.h"

HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE); //Дескриптор активного окна

void setColor(Color text, Color background) //функция с помощью которой происходит изменение цвета текста
{
	SetConsoleTextAttribute(hStdOut, (WORD)((background << 4) | text)); //установка параметров текста
}


void SetCursor(int x, int y) //функция для того чтобы устанавливать позицию курсора в консоли по оси Х и Y
{
	COORD myCoords = { x,y }; //инициализация координат
	SetConsoleCursorPosition(hStdOut, myCoords); //Способ перемещения курсора на нужные координаты
}

void PaintPos(int ship_pos[12][24], int x, int num_color) //прорисовка игровой карты в соответсвии с положением поставленных корабликов
{
	for (size_t i = 1; i < 11; i++) //выполнеям нижеуказанный код 10 раз так как общее количество строк равно 10
	{
		int y = 1 + i; //уставнавливаем координаты по умолчанию 2 по Х и 2 по Y так как отрисовка поля должно начинаться там
		SetCursor(x, y); //перемещаем курсор на вышеуказанные позиции

		for (size_t g = 2; g < 22; g++)  //выполнеям нижеуказанный код 20 раз так как общее количество столбцов равно 20
		{
			if (ship_pos[i][g] == 2) //если в массиве на этом месте находится "2"
			{
				setColor(LightGray, LightGray); //рисуем серую клеточку
			}
			else if (ship_pos[i][g] == 3) //если в массиве на этом месте находится "3"
			{
				setColor(LightMagenta, LightMagenta); //рисуем клеточку непонятного цвета
			}
			else if (ship_pos[i][g] >= 4) //если в массиве на этом месте находится "4+"
			{
				setColor(Color(num_color), Color(num_color)); //устанавливаем цвет корабликов (наши - черные / врага - белые)
			}
			else //в иных случаях рисуем белую клеточку
			{
				setColor(White, White); //устанавливаем белый цвет так как таким цветом будет игровая локация на которой будут происходить основные действия
			}
			cout << "+"; //рисуем любой знак, из-за окраски он будет квадратиком
		}
		cout << "\n"; //переход на новую строку при отрисовки одной строки полностью
	}
}

void Avake() //функция которая будет показана игроку самая первая
{
	setColor(White, LightBlue); //Устанавливаем цвет текста (белый на голубом)
	SetCursor(24, 12); //устанавливаем позицию курсора (на своё усмотренние)
	cout << "МОРСКОЙ БОЙ"; //выводим надпись на экран
}

void CreatField(int speed, int X, int num_color) //Функция благодоря которой будет отрисовываться игровое поле
{
	SetCursor(X, 1); //Устанавливаем курсор на нужную позицию
	char mas[10] = { 'А','Б','В','Г','Д','Е','Ж','З','И','К' }; //буковки которые будут находится сверху игрового поля и ориентировать игрока куда он бьёт
	setColor(White, Color(num_color)); //Смена цвета (буква - белый; заливка - красный/синий)
	int A = 0, B = 0; //переменные необходимые для правильной отрисовки игрового поля
	cout << "  " << mas[0]; //С помощью этого печатаем букву "А"и ставим в начале пробел чтобы было ровненько и красиво
	for (size_t i = 0; i < 12; i++) //выполнеям нижеуказанный код 12 раз так как общее количество строк равно 12
	{
		if (B == 0) //гениальная проврека, которая сработает один раз
		{
			SetCursor(X + 3, 1 + i); //Устанавливаем курсор на нужную позицию
			B++; //увеличиваем значение переменной
		}
		else //иначе
		{
			SetCursor(X, 1 + i);  //Устанавливаем курсор на нужную позицию
		}
		for (size_t g = 0; g < 23; g++) //выполнеям нижеуказанный код 23 раз так как общее количество столбцов равно 23
		{
			if (i == 0 && g == 22) //выполняем ниэеуказанный код, если мы на первой строке, и 22 элементе
			{
				setColor(Color(num_color), Color(num_color)); //Меняем цвет текста и заливки на красный/синий (границы поля на которых нету цифр ил букв)
				Sleep(speed); //Задержка чтобы была анимация
				cout << '+'; //рисуем любой знак, из-за окраски он будет квадратиком
			}
			if (i == 0 && g > 0 && g < 10) //выполняем ниэеуказанный код, если мы на первой строке, и в диапозоне с 0-го по 10-ый элемент
			{
				setColor(White, Color(num_color)); //Смена цвета (буква - белый; заливка - красный/синий)
				Sleep(speed); //Задержка чтобы была анимация
				cout << " " << mas[g]; //Пишем пробел, и букву которая стоит на месте элемента номер которого равен значению "g"
			}
			else if (i > 0 && i < 11 && g == 0) //Иначе если мы находимся с 0-ой по 11-ую строку на 0-м элементе
			{
				setColor(White, Color(num_color)); //Смена цвета (буква - белый; заливка - красный/синий)
				if (i < 10) //Если мы находимся на строках не достигающих значения "10"
				{
					Sleep(speed); //Задержка чтобы была анимация
					cout << i << ' '; //Пишим цифру указывающая на номер строки которая будет помагать игроку ориентироваться куда он стреляет () для того чтобы было ровно по соотношению с двузначными цифрами
				}
				else //иначе
				{
					Sleep(speed); //Задержка чтобы была анимация
					cout << i; //Пишем цифру без пробелов так как тут они не будут нужны ведь цифра которая будет выводиться "10"
				}
			}
			else if (i == 11 || g > 20 && g < 23) //Иначе если мы находимся на 11-ой строке, на 21-22-ых элементах
			{
				if (A == 0 && i == 11) //проверка на последней строке которая нужна чтобы выводился кубик который не выводится самостоятельно
				{
					Sleep(speed); //Задержка чтобы была анимация
					cout << "+";//рисуем любой знак, из-за окраски он будет квадратиком
					A++; //меняем значение переменной благодаря которой было можно реализовать дорисовку нужного кубика
				}
				setColor(Color(num_color), Color(num_color)); //Меняем цвет текста и заливки на красный/синий (границы поля на которых нету цифр ил букв)
				Sleep(speed); //Задержка чтобы была анимация
				cout << '+'; //рисуем любой знак, из-за окраски он будет квадратиком
			}
			else if (i > 0) //если мы находимся на строке номер которой не равен "0" (непосредственно игровое поле)
			{
				Sleep(speed); //Задержка чтобы была анимация
				setColor(White, White); //Меняем цвет текста и заливки на белый (непосредственно игровое поле)
				cout << '+'; //рисуем любой знак, из-за окраски он будет квадратиком
			}
		}
	}
	setColor(Black, Black); //устанавливаем полностью черный цвет
}

void Paint(char variant[2][30], int T) //меню выбора расстановки
{
	system("cls"); //очищаем консоль
	for (size_t i = 0; i < 2; i++) //создаём цикл для 2-ух элементов
	{
		SetCursor(30, 6 + i); //Устанавливаем курсор на нужную позицию
		for (size_t p = 0; p < 30; p++) //создаём цикл для всех 30-ти буковок
		{
			if (i == T) //проверка на выбранный пункт
			{
				setColor(Black, White); //выделяем выбранный пункт
			}
			else //иначе
			{
				setColor(White, Black); //убираем выделение выбранного пункта
			}
			cout << variant[i][p]; //выводим пункты в виде тектса
		}
	}
	CreatField(0, 0, 9); //создаём игровое поле занаво
}

void Meny(int num)
{
	char variant[11][40] = { "ВРАГ ДУМАЕТ КУДА УДАРИТЬ...","ВРАГ ПРОМАЗАЛ!", "ВРАГ ПОПАЛ!", "ВРАГ ПОБЕДИЛ... НЕ ГРУСТИ...", "ТВОЙ ХОД." , "ТЫ ПРОМАЗАЛ...", "ТЫ ПОПАЛ!", "ТЫ ПОБЕДИЛ, ПОЗДРАВЛЯЮ!", "+++++++++++++++++++++++++++++++++++++++", "ТЫ ПОПАЛ, ХОДИ СНОВА!", "ЮХУ, ТЫ УНИЧТОЖИЛ ВРАЖЕСКИЙ КОРАБЛИК!" };
	//список вариантов реплик которые могут вывестись во время игры
	SetCursor(22, 15); //Устанавливаем курсор на нужную позицию
	setColor(Black, Black); //устанавливаем полностью черный цвет
	for (size_t i = 0; i < 25; i++) //цикл для стирание предыдущего текста
	{
		cout << variant[10][i]; //выводим "+"
		cout << variant[10][i]; //выводим "+"
	}
	SetCursor(22, 15); //Устанавливаем курсор на нужную позицию
	if (num > 0 && num < 4) //проверяем, если реплики больше относятся к врагу
	{
		setColor(Red, Black); //Устанавливаем красный цвет текста на черном фоне
	}
	else //иначе реплики больше относятся ко мне
	{
		setColor(Green, Black); //Устанавливаем зеленый цвет текста на черном фоне
	}
	for (size_t i = 0; i < 30; i++) //создаём цикл для всех 30-ти буковок
	{
		cout << variant[num][i];  //выводим реплики в виде тектса
	}
}
